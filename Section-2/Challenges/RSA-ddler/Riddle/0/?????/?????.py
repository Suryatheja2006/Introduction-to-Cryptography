'''

░█████╗░░█████╗░░█████╗░░█████╗░░█████╗░
██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗
╚═╝███╔╝╚═╝███╔╝╚═╝███╔╝╚═╝███╔╝╚═╝███╔╝
░░░╚══╝░░░░╚══╝░░░░╚══╝░░░░╚══╝░░░░╚══╝░
░░░██╗░░░░░██╗░░░░░██╗░░░░░██╗░░░░░██╗░░
░░░╚═╝░░░░░╚═╝░░░░░╚═╝░░░░░╚═╝░░░░░╚═╝░░

WELCOME TO THE ACTUAL CHALLENGE DETECTIVE! I SEE YOU'VE CRACKED THE FIRST CIPHER! I COULD'VE SOLVED THAT CIPHER TWICE AS FAST.

'''

from sympy.ntheory.factor_ import totient

flag='[REDACTED]'

############################ MY VERY ADVANCED FUNCTION! ########################################
def Riddler_XOR(a, b, c):
	return (ord(a)^ord(b)*ord(b)^ord(c))

cipher_1=[]
for i in range(len(flag)-2):
	cipher_1.append(Riddler_XOR(flag[i],flag[i+1],flag[i+2]))


cipher_1.append(Riddler_XOR(flag[len(flag)-2],flag[len(flag)-1],flag[0]))

cipher_1.append(Riddler_XOR(flag[len(flag)-1], flag[0], flag[1]))

list_n=[2140324650240744961264423072839333563008614715144755017797754920881418023447140136643345519095804679610992851872470914587687396261921557363047454770520805119056493106687691590019759405693457452230589325976697471681738069364894699871578494975937497937,
	124620366781718784065835044608106590434820374651678805754818788883289666801188210855036039570272508747509864768438458621054865537970253930571891217684318286362846948405301614416430468066875699415246993185704183030512549594371372159029236099, 
	115792089237316195423570985008687907853269984665640564039457584007913129639937, 
	69203410113561398433978337198079999737
	]

list_e=[[REDACTED], 3, 4295098369, 524287]

list_phi=[[REDACTED], 83080244521145856043890029738737726956546916434452537169879192588859777867458807236690693046848339165006576512292305746867203584564063910299351370052981117050930982534839159851819300138997343900214758204779227877738747546051798709001220091, 65537,68940279276627704903811119185919999476]

###################### BET YOUR BATCOMPUTER CAN'T RUN THIS! ###############################################
for i in list_n:
	list_phi.append(totient(i))

list_d=[1, 27693414840381952014630009912912575652182305478150845723293064196286592622486269078896897682282779721668858837430768582289067861521354636766450456684327039016976994178279719950606433379665781300071586068259742625912915848683932903000406697, 77266263685307006230322907286315353524856777913832852852497884154975370477569, 56758248688344445618535855545843339303]

############## I HOPE YOU UNDERSTOOD THIS DOES NOT WORK DETECTIVE #####################################
'''
for i in range(4):
	list_d_riddle.append(pow(e[i],-1,phi[i]))
'''
#######################################################################################################

output=[]
for i in range(len(cipher_1)):
	output.append(pow(cipher_1[i],list_e[i%4],list_n[i%4]))
print(output)

cipher_1 = [12331, 6909, 15145, 9792, 
12944, 3027, 12611, 13520,
2347, 9024, 2330, 1406,
8982, 13254, 2348, 8988,
11875, 7271, 2580, 10796,
9039, 10414, 7217, 12110,
9053, 12970, 2420, 10536,
10835, 13445, 15652, 7907]

########################################### NOW FIND THE FLAG DETECTIVE! #####################################################